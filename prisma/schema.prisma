// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement()) @map("id")
  accountName String @unique @map("accountName")
  password String @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  cash Int @map("cash")
  mmr Int @default(1000) @map("mmr") 

  
  playerPool PlayerPool[]
  squard Squard[]
  home Matching[] @relation(name: "UserAMatches")
  away Matching[] @relation(name: "UserBMatches")
  rank UserTopRankings?
  @@map("User")
}

model UserTopRankings{
  userId Int @id @map("userId")
  rank Int @map("rank")
  mmr Int @map("mmr")

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)
  @@map("UserTopRankings")
}

model Player{
  id Int @id @default(autoincrement()) @map("id")
  name String @map("name")
  speed Int @map("speed")
  passing Int @map("passing")
  dribbling Int @map("dribbling")
  heading Int @map("heading")
  shooting Int @map("shooting")
  tackling Int @map("tackling")
  marking Int @map("marking")
  strength Int @map("strength")
  weight Int @map("weight")
  nationality String @map("nationality")

  playerPool PlayerPool[]
  @@map("Player")
}

model PlayerPool{
  id Int @id @default(autoincrement()) @map("id")
  userId Int @map("userId")
  playerId Int @map("playerId")
  createdAt DateTime @default(now()) @map("createdAt")
  playerLevel Int @map("playerLevel")
  playerName String @map("playerName")
  count Int @map("count")
  sidelined Boolean @default(false) @map("sidelined")
  stamina Int @default(100) @map("stamina")


  user User @relation(fields:[userId], references:[id], onDelete : Cascade)
  playerIndex Player @relation(fields:[playerId], references:[id], onDelete : Cascade)
  squard Squard?
  @@map("PlayerPool")
}

model Squard{
  id Int @id @default(autoincrement()) @map("id")
  userId Int @map("userId")
  playerPoolId Int @unique @map("playerPoolId")

  playerPool PlayerPool @relation(fields : [playerPoolId], references:[id], onDelete:Cascade)
  user User @relation(fields:[userId], references:[id], onDelete : Cascade)
  @@map("Squard")
}

model Matching{
  id Int @id @default(autoincrement()) @map("id")
  userHomeId Int @map("userHomeId")
  userAwayId Int @map("userAwayId")
  result String @map("result") @db.Text

  userHome User @relation(name: "UserAMatches", fields:[userHomeId], references : [id], onDelete : Cascade)
  userAway User @relation(name: "UserBMatches", fields:[userAwayId], references : [id], onDelete : Cascade)

  @@map("Matching")
}