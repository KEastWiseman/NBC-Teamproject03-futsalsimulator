// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  userIndex Int @id @default(autoincrement()) @map("userIndex")
  userId String @unique @map("userId")
  password String @map("password")
  createdAt DataTime @default(now()) @map("createdAt")

  playerPool PlayerPool?
  squard Squard?
  @@map("User")
}

model Player{
  playerIndex Int @id @default(autoincrement()) @map("playerIndex")
  name String @map("name")
  speed Int @map("speed")
  passing Int @map("passing")
  dribbling Int @map("dribbling")
  heading Int @map("heading")
  shooting Int @map("shooting")
  tackling Int @map("tackling")
  marking Int @map("marking")
  strength Int @map("strength")
  weight Int @map("weight")

  @@map("Player")
}

model PlayerPool{
  playerPoolIndex Int @id @default(autoincrement()) @map("playerPoolIndex")
  userIndex @unique @map("userIndex")
  createdAt DateTime @default(now()) @map("createdAt")

  user User @relation(fields:[userIndex], references:[userIndex], onDelete : Cascade)
  playerIndex Player[]
  @@map("PlayerPool")
}

model Squard{
  squardIndex Int @id @default(autoincrement()) @map("squardIndex")
  userIndex @unique @map("userIndex")
  playerPoolIndex @unique @map("playerPoolIndex")

  playerPool PlayerPool @relation(fields : [playerPoolIndex], references:[playerPoolIndex], onDelete:Cascade)
  user User @relation(fields:[userIndex], references:[userIndex], onDelete : Cascade)
  @@map("Squard")
}

model Matching{
  matchIndex Int @id @default(autoincrement()) @map("matchIndex")
  userAIndex @map("userAIndex")
  userBIndex @map("userBIndex")
  result String @map("result") @db.Text

  userA Users @relation(fields:[userAIndex], references : [userIdx], onDelete : Cascade)
  userB Users @relation(fields:[userBIndex], references : [userIdx], onDelete : Cascade)
  @@map("Matching")
}